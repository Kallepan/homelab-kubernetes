apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kube-prometheus-stack
spec:
  project: observability
  source:
    chart: kube-prometheus-stack
    repoURL: https://prometheus-community.github.io/helm-charts
    targetRevision: 72.*.*
    helm:
      releaseName: kube-prometheus-stack
      valuesObject:
        kube-state-metrics:  
          metricLabelsAllowlist: 
          - nodes=[*]
          - namespaces=[*]
          - configmaps=[*]
        alertmanager:
          alertmanagerSpec:
            externalUrl: https://alert.infra.home.arpa
            secrets:
              - alertmanager-mattermost-webhook-url
              - homelab-ca
          config:
            global:
              resolve_timeout: 5m
              http_config:
                tls_config:
                  ca_file: /etc/alertmanager/secrets/homelab-ca/homelab-ca.crt
            inhibit_rules:
              - source_matchers:
                  - "severity = critical"
                target_matchers:
                  - "severity =~ warning|info"
                equal:
                  - "namespace"
              - source_matchers:
                  - "severity = warning"
                target_matchers:
                  - "severity = info"
                equal:
                  - "namespace"
              - source_matchers:
                  - "alertname = InfoInhibitor"
                target_matchers:
                  - "severity = info"
                equal:
                  - "namespace"
              - target_matchers:
                  - "alertname = InfoInhibitor"
            route:
              group_by: ["namespace"]
              group_wait: 30s
              group_interval: 5m
              repeat_interval: 12h
              receiver: "mattermost-metrics-receiver"
              routes:
                - receiver: "null"
                  matchers:
                    - alertname = "Watchdog"
                  continue: false
                - receiver: "mattermost-logging-receiver"
                  matchers:
                    - source = "loki"
                  continue: false
                - receiver: "mattermost-metrics-receiver"
                  matchers:
                    - source = "prometheus"
                    - severity =~ "critical|warning"
                  continue: false
            receivers:
              - name: "mattermost-logging-receiver"
                slack_configs:
                  - api_url_file: /etc/alertmanager/secrets/alertmanager-mattermost-webhook-url/mattermost_logging_webhook_url
                    send_resolved: true
              - name: "mattermost-metrics-receiver"
                slack_configs:
                  - api_url_file: /etc/alertmanager/secrets/alertmanager-mattermost-webhook-url/mattermost_metrics_webhook_url
                    send_resolved: true
              - name: "null"
            templates:
              - "/etc/alertmanager/config/*.tmpl"
          ingress:
            enabled: true
            ingressClassName: istio
            hosts:
              - alert.infra.home.arpa
            tls:
              - secretName: monitoring-tls
                hosts:
                  - alert.infra.home.arpa
        additionalPrometheusRulesMap:
          endpoint-alerts:
            groups:
              - name: endpoint-alerts
                rules:
                  - alert: EndpointDown
                    expr: up{job="blackbox"} == 0 or probe_success{job="blackbox"} == 0
                    for: 1m
                    labels:
                      severity: critical
                    annotations:
                      summary: "Endpoint {{ $labels.instance }} is down"
                      description: "{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 1 minute."
        crds:
          upgradeJob:
            enabled: true
        defaultRules:
          create: true
        grafana:
          adminUser: administator
          additionalDataSources:
            - access: proxy
              isDefault: false
              name: loki
              orgId: 1
              type: loki
              url: http://loki-read.observability.svc.cluster.local:3100
              version: 2
            - access: proxy
              isDefault: false
              name: jaeger
              orgId: 1
              type: jaeger
              url: http://jaeger-query.observability.svc.cluster.local:16686
          enabled: true
          extraSecretMounts:
            - name: grafana-generic-oauth-secret-mount
              defaultMode: 0440
              secretName: grafana-generic-oauth-secret
              mountPath: /etc/secrets/auth_generic_oauth
              readOnly: true
          grafana.ini:
            server:
              root_url: https://monitoring.infra.home.arpa
            auth.anonymous:
              enabled: true
            auth.generic_oauth:
              tls_skip_verify_insecure: true
              auto_login: false
              allow_assign_grafana_admin: true
              allow_sign_up: true
              api_url: https://sso.infra.home.arpa/realms/homelab/protocol/openid-connect/userinfo
              auth_url: https://sso.infra.home.arpa/realms/homelab/protocol/openid-connect/auth
              token_url: https://sso.infra.home.arpa/realms/homelab/protocol/openid-connect/token
              client_id: $__file{/etc/secrets/auth_generic_oauth/client_id}
              client_secret: $__file{/etc/secrets/auth_generic_oauth/client_secret}
              enabled: true
              email_attribute_path: email
              login_attribute_path: preferred_username
              name_attribute_path: name
              name: Keycloak-OAuth
              role_attribute_path: contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'
              scopes: openid email profile offline_access roles
              skip_org_role_sync: false
          ingress:
            enabled: true
            ingressClassName: istio
            hosts:
              - monitoring.infra.home.arpa
            tls:
              - secretName: monitoring-tls
                hosts:
                  - monitoring.infra.home.arpa
          persistence:
            accessModes:
              - ReadWriteOnce
            enabled: true
            type: pvc
            size: 2Gi
            storageClassName: openebs-hostpath
          sidecar:
            dashboards:
              enabled: true
              label: grafana_dashboard
              labelValue: "1"
              namespace: observability
        prometheus:
          prometheusSpec:
            additionalArgs:
              - name: "web.enable-otlp-receiver"
                value: ""
            additionalScrapeConfigs:
              - job_name: blackbox_http
                metrics_path: /probe
                params:
                  module: [http_2xx]
                static_configs:
                  - targets:
                      # Network Health
                      - https://google.com
                      # Core Cluster
                      - https://gitlab.infra.home.arpa/users/sign_in?auto_sign_in=false
                      - https://vault.infra.home.arpa
                      - https://sso.infra.home.arpa
                      # Production Cluster
                      - https://homepage.svc.home.arpa
                relabel_configs:
                  - source_labels: [__address__]
                    target_label: __param_target
                  - source_labels: [__param_target]
                    target_label: instance
                  - target_label: __address__
                    replacement: blackbox-prometheus-blackbox-exporter.observability.svc.cluster.local:9115
              - job_name: blackbox_http_auth
                metrics_path: /probe
                params:
                  module: [http_auth]
                static_configs:
                  - targets:
                      # Docker Machine
                      - https://docs.app.home.arpa
                relabel_configs:
                  - source_labels: [__address__]
                    target_label: __param_target
                  - source_labels: [__param_target]
                    target_label: instance
                  - target_label: __address__
                    replacement: blackbox-prometheus-blackbox-exporter.observability.svc.cluster.local:9115
              - job_name: istiod
                kubernetes_sd_configs:
                  - role: endpoints
                    namespaces:
                      names:
                        - istio-system
                relabel_configs:
                  - source_labels:
                      [
                        __meta_kubernetes_service_name,
                        __meta_kubernetes_endpoint_port_name,
                      ]
                    action: keep
                    regex: istiod;http-monitoring
              - job_name: "envoy-stats"
                metrics_path: /stats/prometheus
                kubernetes_sd_configs:
                  - role: pod
                relabel_configs:
                  - source_labels: [__meta_kubernetes_pod_container_port_name]
                    action: keep
                    regex: ".*-envoy-prom"
              - job_name: "kubernetes-pods"
                kubernetes_sd_configs:
                  - role: pod
                relabel_configs:
                  - source_labels:
                      [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                    action: keep
                    regex: true
                  - source_labels: [__meta_kubernetes_pod_container_port_name]
                    action: keep
                    regex: metrics
                  - source_labels:
                      [__meta_kubernetes_pod_annotation_prometheus_io_path]
                    action: replace
                    target_label: __metrics_path__
                    regex: (.+)
                  - source_labels:
                      [__address__, __meta_kubernetes_pod_container_port_number]
                    action: replace
                    regex: (.+):(?:\d+);(\d+)
                    replacement: ${1}:${2}
                    target_label: __address__
                  - action: labelmap
                    regex: __meta_kubernetes_pod_label_(.+)
                  - source_labels: [__meta_kubernetes_namespace]
                    action: replace
                    target_label: kubernetes_namespace
                  - source_labels: [__meta_kubernetes_pod_name]
                    action: replace
                    target_label: kubernetes_pod_name
            storageSpec:
              volumeClaimTemplate:
                spec:
                  accessModes:
                    - ReadWriteOnce
                  resources:
                    requests:
                      storage: 30Gi
                  storageClassName: openebs-hostpath
        server:
          global:
            scrape_interval: 15s
            evaluation_interval: 1m
            scrape_timeout: 10s
  destination:
    server: 'https://kubernetes.default.svc'
    namespace: observability
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - ServerSideApply=true